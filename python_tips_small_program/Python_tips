Srisaraeswathi
=========================================================================
In Python, `list`, `str`, `tuple`, and `dict` each have a set of built-in methods that provide different functionalities. Hereâ€™s a summary of commonly used methods for each data type:

---

### **List Methods**

Lists are mutable and support many methods to modify their contents.

- **`append(x)`**: Adds an item `x` to the end of the list.
- **`extend(iterable)`**: Adds all elements from `iterable` to the end of the list.
- **`insert(i, x)`**: Inserts item `x` at position `i`.
- **`remove(x)`**: Removes the first occurrence of `x` in the list.
- **`pop(i)`**: Removes and returns the item at position `i` (last item by default).
- **`clear()`**: Removes all items from the list.
- **`index(x, start, end)`**: Returns the index of the first occurrence of `x`.
- **`count(x)`**: Returns the number of occurrences of `x`.
- **`sort(key, reverse)`**: Sorts the list in ascending order (or descending if `reverse=True`).
- **`reverse()`**: Reverses the list in place.
- **`copy()`**: Returns a shallow copy of the list.

---

### **String Methods**

Strings are immutable, so methods return a new string rather than modifying the original.

- **`capitalize()`**: Capitalizes the first character.
- **`lower()`**: Converts all characters to lowercase.
- **`upper()`**: Converts all characters to uppercase.
- **`title()`**: Converts the first character of each word to uppercase.
- **`swapcase()`**: Swaps the case of all characters.
- **`find(sub, start, end)`**: Returns the lowest index where substring `sub` is found.
- **`index(sub, start, end)`**: Like `find()`, but raises an error if `sub` is not found.
- **`count(sub, start, end)`**: Counts the occurrences of `sub`.
- **`replace(old, new, count)`**: Replaces occurrences of `old` with `new`.
- **`strip(chars)`**: Removes leading and trailing characters (whitespace by default).
- **`lstrip(chars)`**: Removes leading characters.
- **`rstrip(chars)`**: Removes trailing characters.
- **`split(sep, maxsplit)`**: Splits the string into a list of substrings.
- **`join(iterable)`**: Concatenates an iterable of strings with the string as a separator.
- **`startswith(prefix, start, end)`**: Checks if the string starts with `prefix`.
- **`endswith(suffix, start, end)`**: Checks if the string ends with `suffix`.

---

### **Tuple Methods**

Tuples are immutable and support fewer methods than lists.

- **`count(x)`**: Returns the number of occurrences of `x`.
- **`index(x, start, end)`**: Returns the index of the first occurrence of `x`.

Since tuples are immutable, they lack methods like `append`, `remove`, or `sort` that modify the content.

---

### **Dictionary Methods**

Dictionaries are mutable mappings of key-value pairs.

- **`get(key, default)`**: Returns the value for `key` if it exists; otherwise, returns `default`.
- **`keys()`**: Returns a view object of the dictionary's keys.
- **`values()`**: Returns a view object of the dictionary's values.
- **`items()`**: Returns a view object of the dictionary's key-value pairs as tuples.
- **`update([other])`**: Updates the dictionary with key-value pairs from `other`.
- **`pop(key, default)`**: Removes and returns the value for `key`; if `key` doesn't exist, returns `default`.
- **`popitem()`**: Removes and returns the last key-value pair as a tuple.
- **`clear()`**: Removes all items from the dictionary.
- **`setdefault(key, default)`**: Returns the value of `key` if it exists; if not, sets `key` to `default`.
- **`copy()`**: Returns a shallow copy of the dictionary.
- **`fromkeys(iterable, value)`**: Creates a new dictionary with keys from `iterable`, each set to `value`.

---

Each of these methods provides flexibility in handling and transforming data stored in these common data types.